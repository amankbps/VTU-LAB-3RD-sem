#include<stdio.h>
#include<stdlib.h>

struct node
{
    struct node *left;
    int data;
    struct node*right;
};

void insert(struct node**r,int x)
{
    struct node*n,*p;
    n=(struct node*)malloc(sizeof(struct node));
    n->left=NULL;
    n->data=x;
    n->right=NULL;
    if(*r==NULL)
    {
        *r=n;

    }
    else
    {
        p=*r;
        while(1) {

        if(p->data==n->data)
        {
            free(n);
            break;
        }
        else if(p->data<n->data)
        {
            if(p->right==NULL)
            {
                p->right=n;
                break;
            }
            p=p->right;
        }
        else
        {
           if(p->left==NULL)
            {
                p->left=n;
                break;
            }
            p=p->left;
        }
        }
    }
}

void inorder(struct node*r)
{
    if(r!=NULL)
    {
        inorder(r->left);
        printf("%d ",r->data);
        inorder(r->right);
    }
}
void preorder(struct node*r)
{
    if(r!=NULL)
    {
        printf("%d ",r->data);
        preorder(r->left);
        preorder(r->right);
    }
}
void postorder(struct node*r)
{
    if(r!=NULL)
    {
        postorder(r->left);
        postorder(r->right);
        printf("%d ",r->data);
    }
}
int search(struct node*r,int x)
{
    while(r!=NULL)
    {
        if(r->data==x)
            return 1;
        else if(r->data<x)
            r=r->right;
        else
            r=r->left;
    }
    return 0;
}

int main()
{
    struct node*root=NULL;
    int c,x,n;
    printf("\n1.creat\n2.inorder\n3.preorder\n4.postorder\n5.search\n6.exit ");
    while(1) {
    printf("\nenter your choice ");
    scanf("%d",&c);
    switch(c)
    {
        case 1:printf("enter the number of nodes ");
               scanf("%d",&n);
               printf("enter the data :");
               for(int i=0;i<n;i++)
               {
                   scanf("%d",&x);
                   insert(&root,x);
               }
               break;
        case 2:inorder(root);
               break;
         case 3:preorder(root);
                break;
        case 4:postorder(root);
                break;
        case 5:printf("enter the value u want to search ");
                 scanf("%d",&x);
              printf("%d ",search(root,x));
               break;
         case 6:return 0;
    }}
    return 0;
}
